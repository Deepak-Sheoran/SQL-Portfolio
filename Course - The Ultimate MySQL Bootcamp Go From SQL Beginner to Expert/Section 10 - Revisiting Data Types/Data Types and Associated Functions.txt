Types of Data Types:
1. Numeric Data Types
2. Date and Time Data Types
3. String Data Types
4. Spatial Data Types
5. The JSON Data Types

1. Types of Numeric Data Types:
   -> Integer Types(Exact Values):
      - TINYINT - 1 Byte, -128 to 127, 0 to 255
      - SMALLINT - 2 Bytes, -32768 to 32767, 0 to 65535
      - MEDIUMINT - 3 Bytes, -8388608 to 8388607, 0 to 16777215
      - INT or INTEGER - 4 Bytes
      - BIGINT - 8 Bytes
        The UNSIGNED can be used as a constraint while creating or altering a table and that makes it so the range starts from 0 instead of a negative number and because of that the range 
        of integers we can store inside the columns gets longer. If a fractional value is inserted it gets rounded.

   -> Fixed-Point Types(Exact Values):
      DECIMAL or NUMERIC data types can be more exact but it takes up more space but FLOAT AND DOUBLE store larger number using less space but that comes at the cost of precision.

      - DECIMAL(precision, scale) - Total number of digits = precision, scale number of which comes after the decimal so number of digits allowed before decimal = precision - scale
      - NUMERIC(precision, scale)   scale should be less than precision.
      Here both DECIMAL and NUMERIC are one and the same, precision represents the number of significant digits that are stored for values, and scale tell how many digits are allowed after 
      the decimal point.
      Standard SQL requires that DECIMAL(5,2) be able to store any value with five digits and two decimals, so values that can be stored range from -999.99 to 999.99.

   -> Floating-Point Types(Approximate Value):
      - FLOAT  - 4 Bytes - Precision issues after around 7 digits.
      - DOUBLE - 8 Bytes - Precision issues after around 15 digits.
 
   -> Bit-Value Type - BIT(m) - m can range from 1 to 64.
      BIT is used to store bit values. BIT(M) enables storage of M-bit values. If a value is assigned that is less than M bits long, the value is padded on the left with zeros.

2. DATE and TIME Data Types:
   -> DATE - ('YYYY-MM-DD') - Stores values with a date but no time.
   -> TIME - ('HH:MM:SS') - Stores values with a time but no date.
   -> DATETIME - ('YYYY-MM-DD HH:MM:SS') - Stores values with a Date and Time - Takes more space but can store a large range of date and times. 
   -> TIMESTAMP - ('YYYY-MM-DD HH:MM:SS') - Takes less space but can store a small range of date and times. Range from 1970-01-01 00:00:01' UTC to '2038-01-19 03:14:07' UTC
   -> YEAR

  Important Date and Time Functions:
  
  1. Working with current date and time i.e., accessing the current date and time dynamically:
     CURDATE() [or CURRENT_DATE(), CURRENT_DATE],
     CURTIME() [or CURRENT_TIME(), CURRENT_TIME],
     NOW() [or CURRENT_TIMESTAMP(), CURRENT_TIMESTAMP]

  2. Formatting Dates and extracting a portion:
     DATE() - Extract the date part of a date or datetime expression.
     TIME() - Extract the time portion of the expression passed.

     a) Extracting numbers like day number, month number etc.

        DAY() [or DAYOFMONTH()] - Returns the day of the month (0 - 31)
        DAYOFWEEK() - Returns the weekday index of the argument [1(Sunday) - 7(Saturday)]
        DAYOFYEAR() - Returns the day of the year (1 - 366)

        WEEK() - Return the week number.
        WEEKDAY() - Return the weekday index.
        WEEKOFYEAR() - Return the calendar week of the date (1 - 53).

        MONTH() - Return the month from the date passed.

        QUARTER() - Return the quarter from a date argument.

        YEAR() - Return the year.
        YEARWEEK() - Return the year and week.

        HOUR() - Extract the hour.
        MINUTE() - Return the minute from the argument.
        SECOND() - Return the second (0 - 59).
        MICROSECOND() - Return the microseconds from argument.

     b) Extracting information as string values
        DAYNAME() - Return the name of the weekday.
        MONTHNAME() - Return the name of the month.
        
     c) Operating on Dates and Times
        DATEDIFF(expr1, expr2) - The argument can be date or datetime, returns expr1 - expr2 as a value in days. Only the date parts of the values are used in the calculation.
        TIMEDIFF(expr1, expr2)

        DATE_ADD(date, INTERVAL expr UNIT), DATE_DIFF(date, INTERVAL expr UNIT) - ex. DATE_ADD(NOW(), INTERVAL 1 YEAR);

        This is also possible -> SELECT NOW() - INTERVAL 1 YEAR;
        

     d) Formatting Dates with the DATE_FORMAT(date, format) function - ex. SELECT DATE_FORMAT('2009-10-04 22:23:00', '%W %M %Y'); -- here %W is a specifier
        Or Times with TIME_FORMAT(time, format) function.
        Important Specifiers:
        
          For abbreviated names
            %a - Weekday names(Sun, ..., Sat)
            %b - Month names(Jan, ..., Dec)

          For full names
            %W - Weekday names(Sunday, ..., Saturday)
            %M - Month names(January, ..., December)

          For numeric values
            Day of Week
              %w - (0=Sunday, ..., 6=Saturday)
          
            Day of Month
              %D - (0th, 1st, 2nd, 3rd, ...)
              %d - (00, 01, 02, ..., 31)
              %e - (0, 1, 2, 3, ..., 31)
            
            Day of Year
              %j - (001, 002, ..., 366)

            Month
              %c - (0, ..., 12)
              %m - (00, 01, ..., 12)

            Year
              %Y - Four Digit
              %y - Two Digit
            
            Time
              Hour:
                %H - (00, ..., 23)
                %h or %I - (01, ..., 12)
                %k - (0, ..., 23)
                %l - (1, ..., 12)
              
              Minute:
                %i - (00, ..., 59)

              Second:
                %S or %s - (00, ..., 59)
                
              Microsecond:
                %f - (000000, ..., 999999)

            Special
              %p - AM or PM
              %r - Time, 12-hour (hh:mm:ss followed by AM or PM)
              %T - Time, 24-hour(hh:mm:ss)
              %% - %
        

3. Types of String Data Types:
   -> CHAR and VARCHAR
      - CHAR(len) - Declared with a length len that indicates the maximum number of characters that can be stored for a value in that column. The length of a CHAR column is fixed. len can 
        be any value from 0 to 255. Best be used when we know the size of each value within the column will always be within a certain range. CHAR is faster for fixed length text.

      - VARCHAR(len) - Values are variable-length strings. len can be a value from 0 to 65,535. This data type is optimized for storing text of different sizes or variable lengths in the 
        best possible ways.

   -> BINARY and VARBINARY
   -> BLOB and TEXT
   -> ENUM short for Enumeration/Enumerated List, a column type where we have a set of defined list. Here we get the readability of a string with the underlying storage of an integer.
      A string object with a value chosen from a list of permitted values that are enumerated explicitly in the column specification at table creation time.
      Ex - size ENUM('x-small', 'small', 'medium', 'large', 'x-large')
      SELECT size, size + 0 -- size of 0 returns the index of the stored value, index starts at 1
      The statements like ORDER BY use the indexes to perform their operation not the stored string but functions like MAX operate on the stored string not the underlying index/position.
      
   -> SET

Bonus Note:
Setting up a feature that lets us know when a data entry was entered or even updated:
CREATE TABLE table_name
    (
	Created at DATETIME DEFAULT NOW(),
	Updated at DATETIME DEFAULT NOW() ON UPDATE NOW()
    );