Notes:
1. CRUD stands for Create Read Update and Delete. CRUD are the four basic action that we should be able to perform to our data.
   C - Create new rows of data i.e., using INSERT INTO <table_name>() VALUE(); command to create new rows of data in a table.
   R - Read the existing data using the SELECT column_names FROM <table_name>; command to extract the data and output it on the screen.
   U - Update the existing data using the UPDATE <table_name> SET <column_name> = VALUE; command to update the existing rows of data in the table.
   D - DELETE the existing data using the DELETE FROM <table_name>; command to either delete every row or a select few using this command with the WHERE command.

2. The C part of CRUD is pretty straightforward. All we have to keep in mind is the syntax of INSERT INTO command and to make sure that the order in which the VALUE is being inserted match 
   the original structure of the data. If we don't want to follow that structure we can always the swap the position of the columns but the values will then have to follow that new 
   structure. Other than that we have to keep an eye of the data type of the values so that they match with the column's assigned data type and other constraints that have been put on the 
   columns when the table was created.

3. WITH R, U and D we can get quite creative since we have multiple other commands we can use in lieu like WHERE, ORDER BY, GROUP BY etc.

4. A good rule of 👍 is to run a select command that uses the same where commands with the conditions that we are using so that the output will be able to tell us what rows we will update 
   or delete when those commands are run.

SQL Statements:
- SELECT statement for reading the data stored within a table.
  Syntax -> SELECT <column_names> FROM <table_name>; -- when we put * in place of column_names, it means we want to extract all the columns in the table.
  If we want to get a subset of columns all we have to do is put their exact names in place of column_names and separate each column name with a comma like the following:
  SELECT column1_name, column2_name FROM <table_name>;
  That's that about extracting all or some of the columns but to do so with rows we use the WHERE command.

- WHERE keyword for extracting rows of data that meet a certain condition
  WHERE is a special keyword in SQL, that allows us to narrow down the rows that we are working with. The WHERE command is very useful as it's main objective is to apply condition so that 
  we only get the rows that meet those conditions and so WHERE is used not only with SELECT statement but also with UPDATE, DELETE and other commands.
  Syntax:
  SELECT <column_name>
  FROM <table_name>
  WHERE condition; -- condition can be like column_name = (or > or >= or < or <=) some_value
  Note - There is no need to 'SELECT' the column that's part of the condition under the 'WHERE' statement if there is no need to do so.

- AS keyword for renaming the column names so that the newer name will be shown when the table gets printed out, it doesn't do in place change just for that single statement. AS is used to 
  assign aliases to the column names.
  The main use of AS comes into play 
  Syntax - SELECT <column_name> AS <alias> FROM <table_name>;

- UPDATE keyword for altering the existing rows inside a table
  Syntax - UPDATE <table_name> SET <column1_name> = <value1>, <column2_name> = <value2> WHERE condition;
  If we don't use the WHERE command alongside the UPDATE command then every value will be updates for columns column1_name and column2_name.

- DELETE keyword for deleting the rows inside a table
  Syntax - DELETE FROM <table_name> WHERE condition;
  Without the where command all the rows will be deleted, columns that have AUTO_INCREMENT applied to them will pick up from where they left off i.e., they won't start back from one.
  Using the WHERE allows us to pick the rows that we want to delete.